import nextcord
from nextcord.ext import commands
from nextcord import Interaction, SlashOption, ButtonStyle
from nextcord.ui import Button, View, Modal, TextInput
import qrcode, aiohttp,io
import random, string, time

class Links(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed + ‡∏õ‡∏∏‡πà‡∏°
    @commands.command()
    async def links(self, ctx):
        embed = nextcord.Embed(
            title="Links Tools",
            description="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            color=0x8A2BE2
        )
        embed.set_image(url="http://upload-image.free.nf/files/1745683162_Untitled14_20250426225834.png")
        view = View()

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 1: ‡∏¢‡πà‡∏≠‡∏•‡∏¥‡πâ‡∏á
        shorten_button = Button(label="‡∏¢‡πà‡∏≠‡∏•‡∏¥‡πâ‡∏á", style=ButtonStyle.primary)
        shorten_button.callback = self.shorten_link_modal
        view.add_item(shorten_button)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
        qr_button = Button(label="‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code", style=ButtonStyle.secondary)
        qr_button.callback = self.qr_modal
        view.add_item(qr_button)

        await ctx.send(embed=embed, view=view)

    # Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πà‡∏≠‡∏•‡∏¥‡πâ‡∏á
    async def shorten_link_modal(self, interaction: Interaction):
        class ShortenModal(Modal):
            def __init__(self):
                super().__init__("‡∏¢‡πà‡∏≠‡∏•‡∏¥‡πâ‡∏á URL", timeout=300)
                self.url = TextInput(label="‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠", required=True)
                self.add_item(self.url)

            async def callback(self, interaction: Interaction):
                link = self.url.value
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"https://tinyurl.com/api-create.php?url={link}") as resp:
                        short_link = await resp.text()
                await interaction.response.send_message(f"`üîó` **‡∏•‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß:** ```{short_link}```", ephemeral=True)
        await interaction.response.send_modal(ShortenModal())

    # Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á QR
    async def qr_modal(self, interaction: Interaction):
        class QRModal(Modal):
            def __init__(self):
                super().__init__("‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code", timeout=300)
                self.url = TextInput(label="‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR", required=True)
                self.add_item(self.url)

            async def callback(self, interaction: Interaction):
                link = self.url.value
                qr = qrcode.make(link)
                buffer = io.BytesIO()
                qr.save(buffer, format="PNG")
                buffer.seek(0)

                random_text = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
                timestamp = int(time.time())
                file = nextcord.File(buffer, filename=f"{random_text}_{timestamp}.png")
                await interaction.response.send_message(content="‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ QR Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", file=file, ephemeral=True)
        await interaction.response.send_modal(QRModal())

def setup(bot):
    bot.add_cog(Links(bot))
